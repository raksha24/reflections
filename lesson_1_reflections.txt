How did viewing a diff between two versions of a file help you see the bug that was introduced?

By comparing each of the segments of two files simultaneously, I could find out the changes made by comparing those segments.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

We can create checkpoints and restore to any previous version or compare for the changes made in the files. This will keep the programmer aware of what he did earlier and how the version worked at the respective checkpoint.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

pros:
1. you know where you stopped and created a checkpoint.
2. you can distingish between the logical bugs and typos checkpoints in the history and have a flow of changes of what you are doing.

cons:
1. its manual task so you need to keep in mind to commit time to time without fail.
2. you need to keep in mind the size of commit for ease in finding out the checkpoints later.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

i dont know

How can you use the commands git log and git diff to view the history of files?

first use git log where you will find the logs of all the changes made. Then use the git diff command to compare any of the required commit id(s).

How might using version control make you more confident to make changes that could break something?